package pl.onewebpro.validation.core.schema

import pl.onewebpro.validation.core.Validated
import pl.onewebpro.validation.core.data.{Extractor, Source}
import pl.onewebpro.validation.core.entity.ValidationMap
import pl.onewebpro.validation.core.error._

trait Schema[R] {
  def bind[S, A](map: ValidationMap[A], source: Source[S])
                (implicit extractor: Extractor[S, A]): Validated[A] =
    source.validate(map).leftMap(composeError(map.key))
}

object Schema {
  [#def apply[R, [#A1#]]([#a1: ValidationMap[A1]#])(apply: ([#A1#]) => R)(unapply: (R) => Option[([#A1#])]): Schema1[R, [#A1#]] =
    new Schema1(apply, unapply, [#a1#])#
   ]
}


class Schema1[R, A1](apply: (A1) => R, unapply: (R) => Option[A1], a1: ValidationMap[A1]) extends Schema[R] {
  def validate[T](source: T)(implicit f: (T) => Source[T], ex1: Extractor[T, A1]): Validated[R] = {
    val s = f(source)
    bind(a1, s).map(apply)
  }
}

[1..21#class Schema2[R, A, [#A1#]]
(apply: (A, [#A1#]) => R, unapply: (R) => Option[(A, [#A1#])], a: ValidationMap[A], [#a1: ValidationMap[A1]#]) extends Schema[R] {

  def validate[T](source: T)
                 (implicit f: (T) => Source[T], ex: Extractor[T, A], [#ex1: Extractor[T, A1]#]): Validated[R] = {
    import cats.implicits._
    val s = f(source)
    (bind(a, s) |@| [#bind(a1, s)# |@| ]).map(apply)
  }
}#
]
